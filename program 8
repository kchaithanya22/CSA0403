
#include <stdio.h>

#define MAX 100

struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
};

int main() {
    struct Process p[MAX];
    int n, quantum, time = 0, completed = 0;
    int queue[MAX], front = 0, rear = 0;
    int visited[MAX] = {0};

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nProcess %d\n", p[i].pid);
        printf("Enter arrival time: ");
        scanf("%d", &p[i].arrivalTime);
        printf("Enter burst time: ");
        scanf("%d", &p[i].burstTime);
        p[i].remainingTime = p[i].burstTime;
    }

    queue[rear++] = 0;
    visited[0] = 1;

    while (completed < n) {
        int index = queue[front++];
        if (p[index].remainingTime > quantum) {
            time = (time > p[index].arrivalTime) ? time : p[index].arrivalTime;
            time += quantum;
            p[index].remainingTime -= quantum;
        } else {
            time = (time > p[index].arrivalTime) ? time : p[index].arrivalTime;
            time += p[index].remainingTime;
            p[index].remainingTime = 0;
            p[index].completionTime = time;
            p[index].turnaroundTime = p[index].completionTime - p[index].arrivalTime;
            p[index].waitingTime = p[index].turnaroundTime - p[index].burstTime;
            completed++;
        }

        for (int i = 0; i < n; i++) {
            if (i != index && !visited[i] && p[i].arrivalTime <= time && p[i].remainingTime > 0) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

        if (p[index].remainingTime > 0) {
            queue[rear++] = index;
        }

        if (front == rear) { // queue is empty but processes remain
            for (int i = 0; i < n; i++) {
                if (!visited[i]) {
                    queue[rear++] = i;
                    visited[i] = 1;
                    break;
                }
            }
        }
    }

    float totalWT = 0, totalTAT = 0;

    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        totalWT += p[i].waitingTime;
        totalTAT += p[i].turnaroundTime;
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].arrivalTime, p[i].burstTime, p[i].completionTime, p[i].turnaroundTime, p[i].waitingTime);
    }

    printf("\nAverage Waiting Time = %.2f", totalWT / n);
    printf("\nAverage Turnaround Time = %.2f\n", totalTAT / n);

    return 0;
}
