
#include <stdio.h>

#define MAX 100

struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;
    int finished;
};

int main() {
    struct Process p[MAX];
    int n, time = 0, completed = 0, minIndex;
    int shortestTime;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Input processes
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nProcess %d:\n", p[i].pid);
        printf("Enter arrival time: ");
        scanf("%d", &p[i].arrivalTime);
        printf("Enter burst time: ");
        scanf("%d", &p[i].burstTime);
        p[i].finished = 0;
    }

    while (completed != n) {
        shortestTime = 9999;
        minIndex = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].arrivalTime <= time && !p[i].finished && p[i].burstTime < shortestTime) {
                shortestTime = p[i].burstTime;
                minIndex = i;
            }
        }

        if (minIndex != -1) {
            time += p[minIndex].burstTime;
            p[minIndex].completionTime = time;
            p[minIndex].turnaroundTime = p[minIndex].completionTime - p[minIndex].arrivalTime;
            p[minIndex].waitingTime = p[minIndex].turnaroundTime - p[minIndex].burstTime;
            p[minIndex].finished = 1;
            completed++;
        } else {
            time++; // Idle CPU
        }
    }

    float avgWT = 0, avgTAT = 0;

    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        avgWT += p[i].waitingTime;
        avgTAT += p[i].turnaroundTime;
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].arrivalTime, p[i].burstTime, p[i].completionTime, p[i].turnaroundTime, p[i].waitingTime);
    }

    printf("\nAverage Waiting Time = %.2f", avgWT / n);
    printf("\nAverage Turnaround Time = %.2f\n", avgTAT / n);

    return 0;
}
