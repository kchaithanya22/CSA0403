#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILENAME "employees.dat"

struct Employee {
    int id;
    char name[30];
    float salary;
    int is_deleted; // 0 = active, 1 = deleted
};

void add_employee() {
    struct Employee emp;
    FILE *fp = fopen(FILENAME, "ab");

    if (!fp) {
        perror("Unable to open file");
        return;
    }

    printf("Enter Employee ID: ");
    scanf("%d", &emp.id);
    printf("Enter Name: ");
    scanf("%s", emp.name);
    printf("Enter Salary: ");
    scanf("%f", &emp.salary);
    emp.is_deleted = 0;

    fwrite(&emp, sizeof(emp), 1, fp);
    fclose(fp);
    printf("Employee added successfully.\n");
}

void display_employees() {
    struct Employee emp;
    FILE *fp = fopen(FILENAME, "rb");

    if (!fp) {
        perror("Unable to open file");
        return;
    }

    printf("\n-- Employee List --\n");
    while (fread(&emp, sizeof(emp), 1, fp)) {
        if (!emp.is_deleted)
            printf("ID: %d, Name: %s, Salary: %.2f\n", emp.id, emp.name, emp.salary);
    }

    fclose(fp);
}

void search_employee() {
    int id, found = 0;
    struct Employee emp;
    FILE *fp = fopen(FILENAME, "rb");

    if (!fp) {
        perror("Unable to open file");
        return;
    }

    printf("Enter Employee ID to search: ");
    scanf("%d", &id);

    while (fread(&emp, sizeof(emp), 1, fp)) {
        if (emp.id == id && !emp.is_deleted) {
            printf("Employee Found: ID: %d, Name: %s, Salary: %.2f\n", emp.id, emp.name, emp.salary);
            found = 1;
            break;
        }
    }

    if (!found) printf("Employee not found.\n");

    fclose(fp);
}

void update_employee() {
    int id, found = 0;
    struct Employee emp;
    FILE *fp = fopen(FILENAME, "rb+");

    if (!fp) {
        perror("Unable to open file");
        return;
    }

    printf("Enter Employee ID to update: ");
    scanf("%d", &id);

    while (fread(&emp, sizeof(emp), 1, fp)) {
        if (emp.id == id && !emp.is_deleted) {
            printf("Enter new name: ");
            scanf("%s", emp.name);
            printf("Enter new salary: ");
            scanf("%f", &emp.salary);

            fseek(fp, -sizeof(emp), SEEK_CUR);
            fwrite(&emp, sizeof(emp), 1, fp);
            found = 1;
            printf("Employee updated.\n");
            break;
        }
    }

    if (!found) printf("Employee not found.\n");

    fclose(fp);
}

void delete_employee() {
    int id, found = 0;
    struct Employee emp;
    FILE *fp = fopen(FILENAME, "rb+");

    if (!fp) {
        perror("Unable to open file");
        return;
    }

    printf("Enter Employee ID to delete: ");
    scanf("%d", &id);

    while (fread(&emp, sizeof(emp), 1, fp)) {
        if (emp.id == id && !emp.is_deleted) {
            emp.is_deleted = 1;
            fseek(fp, -sizeof(emp), SEEK_CUR);
            fwrite(&emp, sizeof(emp), 1, fp);
            found = 1;
            printf("Employee deleted (logically).\n");
            break;
        }
    }

    if (!found) printf("Employee not found.\n");

    fclose(fp);
}

int main() {
    int choice;

    do {
        printf("\n-- Employee Record System (Random Access) --\n");
        printf("1. Add Employee\n");
        printf("2. Display Employees\n");
        printf("3. Search Employee by ID\n");
        printf("4. Update Employee\n");
        printf("5. Delete Employee\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: add_employee(); break;
            case 2: display_employees(); break;
            case 3: search_employee(); break;
            case 4: update_employee(); break;
            case 5: delete_employee(); break;
            case 6: printf("Exiting...\n"); break;
            default: printf("Invalid choice.\n");
        }

    } while (choice != 6);

    return 0;
}
