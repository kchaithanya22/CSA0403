#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, writeblock;
int data = 0, read_count = 0;

void* reader(void* arg) {
    int id = *((int*)arg);

    sem_wait(&mutex);
    read_count++;
    if (read_count == 1)
        sem_wait(&writeblock); // first reader locks writers
    sem_post(&mutex);

    // Reading
    printf("Reader %d reads data = %d\n", id, data);
    sleep(1);

    sem_wait(&mutex);
    read_count--;
    if (read_count == 0)
        sem_post(&writeblock); // last reader releases writer lock
    sem_post(&mutex);

    pthread_exit(NULL);
}

void* writer(void* arg) {
    int id = *((int*)arg);

    sem_wait(&writeblock);

    // Writing
    data += 10;
    printf("Writer %d writes data = %d\n", id, data);
    sleep(1);

    sem_post(&writeblock);

    pthread_exit(NULL);
}

int main() {
    pthread_t r[5], w[5];
    int reader_ids[5], writer_ids[5];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&writeblock, 0, 1);

    // Create readers and writers
    for (int i = 0; i < 3; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&r[i], NULL, reader, &reader_ids[i]);

        writer_ids[i] = i + 1;
        pthread_create(&w[i], NULL, writer, &writer_ids[i]);
    }

    // Join threads
    for (int i = 0; i < 3; i++) {
        pthread_join(r[i], NULL);
        pthread_join(w[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&writeblock);

    return 0;
}
