
#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

int main() {
    int block_size[MAX_BLOCKS], process_size[MAX_PROCESSES];
    int allocation[MAX_PROCESSES];
    int blocks, processes;

    printf("Enter number of memory blocks: ");
    scanf("%d", &blocks);
    printf("Enter size of each block:\n");
    for (int i = 0; i < blocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &block_size[i]);
    }

    printf("Enter number of processes: ");
    scanf("%d", &processes);
    printf("Enter size of each process:\n");
    for (int i = 0; i < processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &process_size[i]);
        allocation[i] = -1; // Initialize all processes as unallocated
    }

    // Worst Fit Allocation
    for (int i = 0; i < processes; i++) {
        int worst_idx = -1;
        for (int j = 0; j < blocks; j++) {
            if (block_size[j] >= process_size[i]) {
                if (worst_idx == -1 || block_size[j] > block_size[worst_idx]) {
                    worst_idx = j;
                }
            }
        }
        if (worst_idx != -1) {
            allocation[i] = worst_idx;
            block_size[worst_idx] -= process_size[i];
        }
    }

    // Output
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processes; i++) {
        printf("%d\t\t%d\t\t", i + 1, process_size[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    return 0;
}
