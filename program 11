#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h> // for sleep()

// Function to be executed by thread 1
void* threadFunction1(void* arg) {
    for (int i = 0; i < 5; i++) {
        printf("Thread 1 is running (iteration %d)\n", i + 1);
        sleep(1); // Sleep for 1 second
    }
    pthread_exit(NULL);
}

// Function to be executed by thread 2
void* threadFunction2(void* arg) {
    for (int i = 0; i < 5; i++) {
        printf("Thread 2 is running (iteration %d)\n", i + 1);
        sleep(1); // Sleep for 1 second
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;

    // Create two threads
    if (pthread_create(&thread1, NULL, threadFunction1, NULL) != 0) {
        perror("Failed to create thread 1");
        return 1;
    }

    if (pthread_create(&thread2, NULL, threadFunction2, NULL) != 0) {
        perror("Failed to create thread 2");
        return 1;
    }

    // Wait for threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Both threads have finished execution.\n");
    return 0;
}
